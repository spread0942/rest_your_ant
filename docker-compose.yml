services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.5
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      # For HTTPS (optional, requires proper certificate setup)
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=you@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - traefik_proxy
  
  # PostgreSQL Database
  db:
    image: postgres:18
    container_name: perfect_menu_db
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - perfectmenu_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - internal_net

  # Node.js API
  api:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: production
    image: perfect_menu_api:${APP_VERSION:-latest}
    container_name: perfect_menu_api
    env_file:
      - .env
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3000
      NODE_ENV: production
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      # API Router
      - "traefik.http.routers.api.rule=Host(`api.perfectmenu.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.priority=100"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "traefik.http.services.api.loadbalancer.server.port=3000"
      # API Docs Router
      - "traefik.http.routers.api-docs.rule=Host(`api.perfectmenu.com`) && PathPrefix(`/api/docs`)"
      - "traefik.http.routers.api-docs.priority=110"
      - "traefik.http.routers.api-docs.service=api"
      - "traefik.http.routers.api-docs.middlewares=api-docs-strip@docker"
      - "traefik.http.routers.api-docs.entrypoints=websecure"
      - "traefik.http.routers.api-docs.tls.certresolver=myresolver"
      - "traefik.http.middlewares.api-docs-strip.stripprefix.prefixes=/api"
    networks:
      - traefik_proxy
      - internal_net

  # Vue.js Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        VUE_APP_API_ENDPOINT: https://api.perfectmenu.com/api
    image: perfect_menu_frontend:${APP_VERSION:-latest}
    container_name: perfect_menu_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`perfectmenu.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.routers.frontend.priority=10"
    networks:
      - traefik_proxy

volumes:
  perfectmenu_data:

networks:
  traefik_proxy:
    external: true
  internal_net:
    driver: bridge